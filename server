#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define MAX_CLIENTS 5

// Client thread function
void *clientThread(void *arg) {
    int client_fd = *((int *)arg);

    // Handle client communication (omitted in this example)

    // Close the client socket
    close(client_fd);

    // Exit the thread
    pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s IP:port\n", argv[0]);
        return 1;
    }

    char delim[] = ":";
    char *Desthost = strtok(argv[1], delim);
    char *Destport = strtok(NULL, delim);

    if (!Desthost || !Destport) {
        printf("Invalid IP:port format\n");
        return 1;
    }

    // Convert port to integer
    int port = atoi(Destport);

    // Create socket
    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        perror("Socket creation failed");
        return 1;
    }

    // Initialize server address structure
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(port);

    // Bind socket to address
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Socket bind failed");
        close(server_fd);
        return 1;
    }

    // Listen for incoming connections
    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("Listen failed");
        close(server_fd);
        return 1;
    }

    printf("Server listening on %s:%d\n", Desthost, port);

    // Accept client connections in a loop
    int client_count = 0;
    while (1) {
        // Accept a client connection
        struct sockaddr_in client_addr;
        socklen_t client_addr_len = sizeof(client_addr);
        int client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_addr_len);
        if (client_fd < 0) {
            perror("Accept failed");
            continue;
        }

        // Check if the maximum number of clients has been reached
        if (client_count >= MAX_CLIENTS) {
            printf("Rejecting client from %s:%d. Maximum number of clients reached.\n",
                   inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
            close(client_fd);
            continue;
        }

        // Increment the client count
        client_count++;

        printf("Client connected from %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

        // Create a new thread to handle the client
        pthread_t tid;
        if (pthread_create(&tid, NULL, clientThread, &client_fd) != 0) {
            perror("Thread creation failed");
            close(client_fd);
            continue;
        }

        // Detach the thread
        pthread_detach(tid);
    }

    // Close the server socket
    close(server_fd);

    return 0;
}
